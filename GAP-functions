# This file contains all functions shown in the wiki


DominantOfNumericalSemigroup := function(S)
       local n;
       if not IsNumericalSemigroup(S) then
               Error("The argument must be a Numerical Semigroup");
       fi;
       if Conductor(S) <= 0 then
               Error("The conductor must be a positive integer");
       fi;
       n := Length(SmallElements(S));
       return SmallElements(S)[n-1];
       
end;


RatioNumericalSemigroup := function(S)
       if not IsNumericalSemigroup(S) then
               Error("The argument must be a Numerical Semigroup");
       fi;
       if 1 in S then
               Error("The Numerical Semigroup must be other than N");
       fi;
       return MinimalGenerators(S)[2];
end;


AreRelatedNumericalSemigroup := function(S,a,b)
       if not IsNumericalSemigroup(S) then
               Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsInt(a) then
               Error("Second argument must be an integer");
       fi;
       if not IsInt(b) then
               Error("Third argument must be an integer");
       fi;
       if (b-a) in S then
               return true;
       fi;
       return false;
end;


Overlinepivots:=function(s, I...)
    local cs,msg,e,a,c,ap,i,msgi,rs,d;
    if Length(I) = 0 then
       msg:=MinimalGenerators(s);
    elif Length(I) = 1 then
       msg:=I[1];
    else
       Error("The number of arguments must be one or two");
    fi;
    if not IsList(msg) or msg = [] then
       Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
    fi;
    if not SortedList(msg) = MinimalGenerators(s) then
       Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
    fi;   
    e:=EmbeddingDimension(s);
    cs:=[]; 
    for i in [2..e] do
        msgi:=msg{[1..(i-1)]};
        a := msg[i];
        d:=Gcd(msgi);
        c:=First([2..Minimum(msgi)], k->(k*a) mod d=0);
        Add(cs,c);
    od;
    return cs;
end;


gluing:=function(l1,l2)
        local d1, d2, t1, t2, s1, s2;
        d1:=Gcd(l1);
        d2:=Gcd(l2);
       if (not(Gcd(d1,d2)=1)) then
            return false;
        fi;
        s1:=NumericalSemigroup(l1/d1);
        s2:=NumericalSemigroup(l2/d2);
       return (not(d1 in l2) and not(d2 in l1)) and ((d1 in s2) and (d2 in s1));
end;


IsFreeForArrangement := function(S, I)
       local p, Min_gen, n_p;
       if not IsNumericalSemigroup(S) then
           Error("First argument must be a Numerical Semigroup");
       fi;
       Min_gen := MinimalGenerators(S);
       if not (IsList(I) and Min_gen = SortedList(I)) then
           Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
       fi;
       p := Length(I);
       if p = 1 then 
           return false; 
       fi;
       n_p := I[p];
       return gluing([n_p],Difference(I,[n_p])) and IsFreeNumericalSemigroup(NumericalSemigroup(Difference(I,[n_p])/Gcd(Difference(I,[n_p]))));
end;


StandardRepresentationNS := function(S, I, z)
       local Min_gen, p, list_c, list_mu, list_lambda, i, mu_i, c_i, q, r, j, d_i, s, list_subrep;
       if not IsNumericalSemigroup(S) then
           Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsListOfIntegersNS(I) then
           Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
       fi;
       Min_gen := MinimalGenerators(S);
       p := Length(Min_gen);
       if not Min_gen = SortedList(I) then
           Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
       fi;
       if not IsFreeForArrangement(S,I) then
           Error("First argument is not free for the considered arrangement");
       fi;
       if not IsInt(z) then
           Error("Third argument must be an integer");
       fi;
       list_c := Overlinepivots(S, I);
       list_mu := z*GcdRepresentation(I);
       list_lambda := [];
       for i in Reversed([2..p]) do
           mu_i := list_mu[i];
           c_i := list_c[i-1];
           q := QuoInt(mu_i, c_i);
           r := RemInt(mu_i, c_i);
           if r = 0 then
               Add(list_lambda, 0);
           else
               if mu_i >= 0 then
                   Add(list_lambda, r);
               else
                   q := q - 1;
                   Add(list_lambda, r + c_i);
               fi;
           fi;
           d_i := Gcd(I{[1..(i-1)]});
           s := c_i*I[i]/d_i;
           list_subrep := q*s*GcdRepresentation(I{[1..(i-1)]});
           for j in [1..(i-1)] do
           list_mu[j] := list_mu[j] + list_subrep[j];
           od;
           list_mu[i] := 0;
       od;
       Add(list_lambda, list_mu[1]);
       return Reversed(list_lambda);
end;


IsGluing := function(A, A_1, A_2)
       local d_1, d_2, d, S, T;
       if not IsListOfIntegersNS(A) then
               Error("First argument must be a non-empty list of positive integers");
       fi;
       if not IsListOfIntegersNS(A_1) then
               Error("Second argument must be a non-empty list of positive integers");
       fi;
       if not IsListOfIntegersNS(A_2) then
               Error("Third argument must be a non-empty list of positive integers");
       fi;
       if not (IsSubset(A, A_1) and IsSubset(A, A_2)) then
               return false;
       fi;
       if not Difference(A, Union(A_1, A_2)) = [] then
               return false;
       fi;
       if not Intersection(A_1, A_2) = [] then
               return false;
       fi;
       d_1 := Gcd(A_1);
       d_2 := Gcd(A_2);
       d := Lcm(Gcd(A_1), Gcd(A_2));
       S := NumericalSemigroup(A_1 / d_1);
       T := NumericalSemigroup(A_2 / d_2);
       if d/d_1 in S and d/d_2 in T then
           return true;
       fi;
       return false;
end;


AllGluings := function(A)
       local a, l_gluings, P;
       if not IsListOfIntegersNS(A) then
               Error("The argument must be a non-empty list of positive integers");
       fi;
       l_gluings := [];
       for P in PartitionsSet(Set(A), 2) do
               if IsGluing(A, P[1], P[2]) then
                       Add(l_gluings, P);
               fi;
       od;
       return l_gluings;
end;


ThresholdIntervalOfNumericalSemigroup := function(S)
       local c, m;
       if not IsNumericalSemigroup(S) then
           Error("The argument must be a Numerical Semigroup");
       fi;
       c := Conductor(S);
       m := Multiplicity(S);
       return [c..(c + m - 1)];
end;


NuNS := function(S, I...)
     local n, a, b, list_nu, i;
       if not IsNumericalSemigroup(S) then
           Error("The argument must be a Numerical Semigroup");
       fi;
       n := Length(I);
       if n = 1 or n > 2 then
           Error("If more arguments are given, they must be two elements");
       fi;
       if n = 0 then
           a := 0;
           b := 2*Conductor(S) - Genus(S);
       fi;
       if n = 2 then
           a := I[1];
           b := I[2];
           if a > b then
               Error("If more arguments are given, the first argument given must be less or equal to the second argument given");
           fi;
       fi;
       list_nu := [];
       for i in [a..b] do
         Add(list_nu, Length(DivisorsOfElementInNumericalSemigroup (S, S[i])));
       od;
       return list_nu;
end;


IsArithmetic := function(S)
       local Min_gen, Diff;
       if not IsNumericalSemigroup(S) then
               Error("The argument must be a Numerical Semigroup");
       fi;
       if 1 in S then
           return true;
       fi;
       Min_gen := MinimalGenerators(S);
       Diff := DeltaSet(Min_gen);
       if Length(Diff) = 1 and Diff[1] = 1 then
           return true;
       fi;
       return false;
end;


IsAperySetOfUniqueExpression := function(S)
       local w;
       if not IsNumericalSemigroup(S) then
               Error("The argument must be a Numerical Semigroup");
       fi;
       for w in AperyList(S) do
               if Length(Factorizations(w,S)) > 1 then
                       return false;
               fi;
       od;
       return true;
end;


IsSimpleNumericalSemigroup := function(S)
       local Min_gen, p, list_c;
       if not IsNumericalSemigroup(S) then
           Error("The argument must be a Numerical Semigroup");
       fi;
       Min_gen := MinimalGenerators(S);
       p := Length(Min_gen);
       if p = 1 then 
           return false; 
       fi;
       list_c := pivots(S);
       return Min_gen[1] - 1 = Sum(list_c{[2..p]} - 1);
end;


pivots:=function(s, I...)
    local cs,msg,e,a,c,ap,i,rmsg,rs,d;
    if Length(I) = 0 then
       msg:=MinimalGenerators(s);
    elif Length(I) = 1 then
       msg:=I[1];
    else
       Error("The number of arguments must be one or two");
    fi;
    if not IsList(msg) or msg = [] then
       Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
    fi;
    if not SortedList(msg) = MinimalGenerators(s) then
       Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
    fi;   
    e:=EmbeddingDimension(s);
    cs:=[]; 
    for i in [1..e] do
        a:=msg[i];
        rmsg:=Difference(msg,[a]);
        d:=Gcd(rmsg);
        rs:=NumericalSemigroup(rmsg/d);
        c:=First([2..Minimum(rmsg)], k->((k*a) mod d=0) and (k*a/d in rs));
        Add(cs,c);
    od;
    return cs;
end;


Asteriskpivots := function(S, I...)
       local Min_gen, p, list_c, i, Sub_min_gen, d_i, S_i, n_i, c;
       if not IsNumericalSemigroup(S) then
           Error("The argument must be a Numerical Semigroup");
       fi;
       if Length(I) = 0 then
           Min_gen := MinimalGenerators(S);
       elif Length(I) = 1 then
           Min_gen := I[1];
       else
           Error("The number of arguments must be one or two");
       fi;
       if not SortedList(Min_gen) = MinimalGenerators(S) then
           Error("Second argument must be an arrangement of the minimal system of generators of the first argument");
       fi;
       if 1 in S then 
           Error("The argument must be a Numerical semigroup other than N"); 
       fi;
       p := Length(Min_gen);
       list_c := [];
       for i in [2..p] do
           Sub_min_gen := Min_gen{[1..i-1]};
           d_i := Gcd(Sub_min_gen);
           S_i := NumericalSemigroup(Sub_min_gen/d_i);
           n_i := Min_gen[i];
           c := First([2..Minimum(Sub_min_gen)], k->((k*n_i) mod d_i=0) and (k*n_i/d_i in S_i));
           Add(list_c, c);
       od;
       return list_c;
end;


IsPiSemigroup := function(T,S)
       local m, I;
       if not IsNumericalSemigroup(T) then
           Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsNumericalSemigroup(S) then
           Error("Second argument must be a Numerical Semigroup");
       fi;
       m := Multiplicity(T);
       I := m + S;
       return SmallElements(T) = Union(SmallElements(I),[0]);
end;


PiSemigroup := function(S, s)
       local I, sm_elem;
       if not IsNumericalSemigroup(S) then
           Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsPosInt(s) then
           Error("Second argument must be a positive integer");
       fi;
       if not s in S then
           Error("Second argument must be an element of the first argument");
       fi;
       I := s + S;
       sm_elem := Union(SmallElements(I), [0]);
       return NumericalSemigroupBySmallElements(sm_elem);
end;


IsMultipleOfNumericalSemigroup := function(T,S)
       local m_S, c_T, a, lim, i;
       if not IsNumericalSemigroup(T) then
           Error("The first argument must be a Numerical Semigroup");
       fi;
       if not IsNumericalSemigroup(S) then
           Error("The second argument must be a Numerical Semigroup");
       fi;
 
       if IsOrdinary(T) then
           return true;
       fi;
 
       m_S := Multiplicity(S);
       c_T := Conductor(T);
       a := 1;
       while a*m_S < c_T do
           i := 1;
           while a*S[i] < c_T do
               i := i + 1;
           od;
           i := i - 1;
           if Difference(SmallElements(T), [c_T])/a = S{[1..i]} then
               return true;
           fi;
           a := a + 1;
       od;
       return false;
end;


WhichIsMultipleOfNumericalSemigroup := function(T,S)
       local m_S, c_T, a, lim, i;
       if not IsNumericalSemigroup(T) then
           Error("The first argument must be a Numerical Semigroup");
       fi;
       if not IsNumericalSemigroup(S) then
           Error("The second argument must be a Numerical Semigroup");
       fi;
 
       if IsOrdinary(T) then
           c_T := Conductor(T);
           return [QuoInt(c_T, Multiplicity(S)) + 1, c_T];
       fi;
 
       m_S := Multiplicity(S);
       c_T := Conductor(T);
       a := 1;
       while a*m_S < c_T do
           i := 1;
           while a*S[i] < c_T do
               i := i + 1;
           od;
           i := i - 1;
           if Difference(SmallElements(T), [c_T])/a = S{[1..i]} then
               return [a, Conductor(T)];
           fi;
           a := a + 1;
       od;
       return fail;
end;


ImageHomomorfismOfNumericalSemigroup := function(S, I)
       local Min_gen, p, j, sum, a;
       if not IsNumericalSemigroup(S) then
               Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsList(I) or I = [] then
               Error("Second argument must be a non-empty list of positive integers");
       fi;
       Min_gen := MinimalGenerators(S);
       p := Length(Min_gen);
       if not p = Length(I) then
               Error("Length of minimal system of generators and length of second argument are different");
       fi;
       sum := 0;
       j := 1;
       for a in I do
               if not IsInt(a) then
                     Error("Second argument must be a list of positive integers");
               fi;
               if a < 0 then
                     Error("Second argument must be a list of positive integers");
               fi;
               sum := sum + a * Min_gen[j];
               j := j + 1;
       od;
       return sum;
end;


GenusOfRelativeIdeal := function(I)
       local m, T;
       if not IsIdealOfNumericalSemigroup(I) then
               Error("The argument must be a relative ideal");
       fi;
       m := Minimum(I);
       T := m + NumericalSemigroup(1);
       return Length(Difference(T, I));
end;


IsReduction := function(S,J,I)
       if not IsNumericalSemigroup(S) then
               Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsIdealOfNumericalSemigroup(J) then
               Error("Second argument must be a relative ideal of the first argument");
       fi;
       if not AmbientNumericalSemigroupOfIdeal(J) = S then
               Error("Second argument must be a relative ideal of the first argument");
       fi;
       if not IsIdealOfNumericalSemigroup(I) then
               Error("Third argument must be a relative ideal of the first argument");
       fi;
       if not AmbientNumericalSemigroupOfIdeal(I) = S then
               Error("Third argument must be a relative ideal of the first argument");
       fi;
       if not (IsIntegral(J) and IsIntegral(I)) then
              return false;
       fi;
       if IsSubset(J, Minimum(I) + S) and IsSubset(I,J) then
               return true;
       fi;
       return false;
end;


IsPrincipalIdeal := function(S,I)
       local m;
       if not IsNumericalSemigroup(S) then
               Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsIdealOfNumericalSemigroup(I) then
               Error("Second argument must be a relative ideal of the first argument");
       fi;
       if not AmbientNumericalSemigroupOfIdeal(I) = S then
               Error("Second argument must be a relative ideal of the first argument");
       fi;  
       m := Minimum(I);
       if m in S and Length(MinimalGenerators(I)) = 1 then
               return true;
       fi;
       return false;
       
end;


DistanceFactorizations := function(x,y)
       local n, sum_1, sum_2, i, x_i, y_i, t_i;
       if not IsList(x) or x = [] then
               Error("First argument must be a non-empty list of integers");
       fi;
       if not IsList(y) or y = [] then
               Error("Second argument must be a non-empty list of integers");
       fi;
       n := Length(x);
       if not Length(y) = n then
               Error("Arguments must be of the same length");
       fi;
       sum_1 := 0;
       sum_2 := 0;
       for i in [1..n] do
           x_i := x[i];
           y_i := y[i];
           if not IsInt(x_i) then
               Error("First argument must be a non-empty list of integers");
           fi;
           if not IsInt(y_i) then
               Error("Second argument must be a non-empty list of integers");
           fi;
           t_i := Minimum(x[i], y[i]);
           sum_1 := sum_1 + x[i] - t_i;
           sum_2 := sum_2 + y[i] - t_i;
       od;
       return Maximum(sum_1, sum_2);
end;


IsNChainOfFactorizations := function(S,N,I)
       local n, value, i;
       if not IsNumericalSemigroup(S) then
               Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsInt(N) then
               Error("Second argument must be a non-negative integer");
       fi;
       if N < 0 then
               Error("Second argument must be a non-negative integer");
       fi;
       if not IsList(I) or I = [] then
               Error("Third argument must be a non-empty list of factorizations of an element");
       fi;
       n := Length(I);
       value := ImageHomomorfismOfNumericalSemigroup(S, I[1]);
       for i in [1..n-1] do
         if not ImageHomomorfismOfNumericalSemigroup(S, I[i+1]) = value then
               Error("Third argument is not a list of factorizations of an element");
         fi;
         if DistanceFactorizations(I[i], I[i+1]) > N then
             return false;
         fi;
       od;
       return true;
end;


NChainOfFactorizations := function(S,I)
       local n, value, N, i, dist_i;
       if not IsNumericalSemigroup(S) then
               Error("First argument must be a Numerical Semigroup");
       fi;
       if not IsList(I) or I = [] then
               Error("Second argument must be a non-empty list of factorizations of an element");
       fi;
       n := Length(I);
       value := ImageHomomorfismOfNumericalSemigroup(S, I[1]);
       N := -1;
       for i in [1..n-1] do
         if not ImageHomomorfismOfNumericalSemigroup(S, I[i+1]) = value then
               Error("Second argument is not a list of factorizations of an element");
         fi;
         dist_i := DistanceFactorizations(I[i], I[i+1]);
         if  dist_i > N then
             N := dist_i;
         fi;
       od;
       return N;
end;


ChainOfNumericalSemigroup := function(S)
       local g, C, i, F, Min_gen, I, T;
       if not IsNumericalSemigroup(S) then
               Error("The argument must be a Numerical Semigroup");
       fi;
       g := Length(Gaps(S));
       C := [S];
       for i in [1..g] do
               F := FrobeniusNumber(C[i]);
               Min_gen := MinimalGenerators(C[i]);
               I := Union(Min_gen, [F]);
               T := NumericalSemigroupByGenerators(I);
               Add(C, T);
       od;
       return C;
end;


ChainOfFamilyOfNumericalSemigroups := function(X)
       local Chain, S;
       Chain := [];
       for S in X do
           if not IsNumericalSemigroup(S) then
                   Error("The argument must be a list of Numerical Semigroups");
           fi;
           Chain := Union(Chain, ChainOfNumericalSemigroup(S));
       od;
       return Chain;
end;


DirectedGraphAllNumericalSemigroups := function(g)
   local hasse, SystemOfGeneratorsToString, count, edges, N, collect_ns, obj_ns, ns, pos_ns, Frob, Min_gen, Sub_min_gen, s, sm_elements, S_i, gen, out, output, r;
   hasse:=function(rel)
       local dom, out;
       dom:=Flat(rel);
       out:=Filtered(rel, p-> ForAny(dom, x->([p[1],x] in rel) and ([x,p[2]] in rel)));
       return Difference(rel,out);
     end;
 
   SystemOfGeneratorsToString := function(sg)
       return Concatenation("< ", JoinStringsWithSeparator(sg, ", "), " >");
   end;
 
   if not IsInt(g) then
       Error("The argument must be a non-negative integer");
   fi;
 
   out := "";
   output := OutputTextString(out, true);
   SetPrintFormattingStatus(output, false);
   AppendTo(output,"digraph  NSGraph{rankdir = TB;\n");
 
   count := 2;
   edges := [];
   N := NumericalSemigroup(1);
   collect_ns := [[N, 1, 0]];
   for obj_ns in collect_ns do
    
       ns := obj_ns[1];
       pos_ns := obj_ns[2];
       Min_gen := MinimalGenerators(ns);
 
       if IsIrreducible(ns) then 
           AppendTo(output, pos_ns," [label=\"",SystemOfGeneratorsToString(Min_gen) ,"\", style=filled];\n");
       else 
           AppendTo(output, pos_ns," [label=\"",SystemOfGeneratorsToString(Min_gen) ,"\"];\n");
       fi;
 
       if obj_ns[3] <= g-1 then
           Frob := FrobeniusNumber(ns);
           Sub_min_gen := Filtered(MinimalGenerators(ns), l -> l > Frob);
           for gen in Sub_min_gen do
               s := Union(SmallElements(ns), [(Frob+1)..(gen+1)]);
               sm_elements := Difference(s, [gen]);
               S_i := NumericalSemigroupBySmallElements(sm_elements);
               Add(edges, [count, pos_ns]);
               Add(collect_ns, [S_i, count, obj_ns[3] + 1]);
               count := count + 1;
           od;
       fi;
   od;
 
   for r in edges do
       AppendTo(output,r[1]," -> ",r[2],";\n");
   od;
 
   AppendTo(output, "}");
   CloseStream(output);
   return out;  
 end;


IsProperBezoutSequence := function(I)
       local n, q_i, q_j, a_i, b_i, a_j, b_j, i, j;
       if not IsBezoutSequence(I) then
           return false;
       fi;
       n := Length(I);
       for i in [1..n-2] do
               q_i := I[i];
           for j in [i+2..n] do
               q_j := I[j];
               a_i := NumeratorRat(q_i); b_i := DenominatorRat(q_i);
               a_j := NumeratorRat(q_j); b_j := DenominatorRat(q_j);
               if a_j*b_i - a_i*b_j < 2 then
                        return false;
               fi;
           od;
       od;
       return true;
end;


BezoutSequenceToProper := function(I)
       local list_ind, n, i, j, q_i, q_j, a_i, b_i, a_j, b_j;
       if not IsBezoutSequence(I) then
           Error("The argument is not a Bezout sequence");
       fi;
       list_ind := [];
       n := Length(I);
       i := 1;
       while i < n+1 do
           Add(list_ind, i);
           q_i := I[i];
           for j in [i+2..n] do
               q_j := I[j];
               a_i := NumeratorRat(q_i); b_i := DenominatorRat(q_i);
               a_j := NumeratorRat(q_j); b_j := DenominatorRat(q_j);
               if a_j*b_i - a_i*b_j < 2 then
                       i := j-1;
                       break;
               fi;
           od;
           i := i + 1;
       od;
       return I{list_ind};
end;


AdjacentFractions := function(x, y)
       local a_1, a_2, b_1, b_2;
       if not IsRat(x) then
               Error("First argument must be a positive rational number");
       fi;
       if NumeratorRat(x) < 0 then
               Error("First argument must be a positive rational number");
       fi;
       if not IsRat(y) then
               Error("Second argument must be a positive rational number");
       fi;
       if NumeratorRat(y) < 0 then
               Error("Second argument must be a positive rational number");
       fi;
       if x >= y then
               return false;
       fi;
       a_1 := NumeratorRat(x); b_1 := DenominatorRat(x);
       a_2 := NumeratorRat(y); b_2 := DenominatorRat(y);
       if a_1*(b_2 + 1) - a_2*b_1 > 0 then 
           if b_1 = 1 then
               return true;
           fi;
           if a_1*b_2 - a_2*(b_1 - 1) > 0 then
               return true;
           fi;
       fi;
end;


WeightModDiophantineIneq := function(a,b)
       local c;
       if not IsInt(a) then
           Error("First argument must be a positive integer");
      fi;
       if a <= 0 then
           Error("First argument must be a positive integer");
       fi;
       if not IsInt(b) then
           Error("First argument must be a positive integer");
       fi;
       if b <= 0 then
           Error("First argument must be a positive integer");
       fi;
       c := a mod b;
       return b - Gcd(c,b) - Gcd(c-1,b);
end;


