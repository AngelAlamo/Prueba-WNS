---
title: "Free numerical semigroup"
format: html
engine: markdown
---

## Definition

The definition of free numerical semigroup comes from the following result.

::: {.callout-note appearance="minimal"}
## Proposition

Let $S$ be a [numerical semigroup](../Basic-concepts/Numerical-semigroup.qmd) and let $P(S) = \{n_1, \ldots, n_e\}$ be the [set of minimal generators](../Basic-concepts/Minimal-set-of-generators.qmd) of $S$. For every $i \in \{2, \ldots, e\}$, it is defined:

1)  $d_i = \gcd(n_1, \ldots, n_{i-1})$.

2)  $\overline{c}_i = \min \{k \in \mathbb{N} \setminus \{0\} ~ | ~ kn_i ~~ is ~ a ~ multiple ~ of ~ d_i\}$.

3)  $c_i^* = \min \{k \in \mathbb{N} \setminus \{0\} ~ | ~ kn_i \in \langle n_1, \ldots, n_{i-1} \rangle\}$.

4)  $c_i = \min \{k \in \mathbb{N} \setminus \{0\} ~ | ~ kn_i \in \langle P \setminus \{n_i\} \rangle\}$.

Then, the following are equivalent:

1)  $n_1 = c_2^* \cdots c_e^*$.

2)  $Ap(S, n_1) = \{\lambda_2n_2 + \cdots + \lambda_e n_e ~ | ~ \lambda_i \in \{0, \ldots, c_i^* - 1 \} ~~ for ~ all i \in \{2, \ldots, e\}\}$.

3)  $F(S) + n_1 = (c_2^* - 1)n_2 + \cdots + (c_e^* - 1)n_e$.

4)  $\overline{c}_i = c_i^*$.

5)  $c_i = \overline{c}_i$.

6)  $c_i = \overline{c}_i = c_i^*$.
:::

It is said that $S$ is free if there is an arrangement of $P(S)$ fulfilling any of the conditions of the proposition. If $S$ is free for any arrangement of $P(S)$, it is said that $S$ is universally free.

## Examples

$\circ$ Let $a,b \in \mathbb{N} \setminus \{0, 1\}$ with $gcd(a,b) = 1$ and $S = \langle a,b \rangle$. Obviously $\overline{c}_2 \le c_2^*$ by definition. On the other hand, if $\overline{c}_2b$ are multiple of $d_2 = a$, since $gcd(a,b) = 1$, then $\overline{c}_2 = qa$ for some $q \in \mathbb{N} \setminus \{0\}$. It is deduced that $\overline{c}_2 = a$, and since $ab \in \langle a \rangle$, by the minimality of $c_2^*$, it holds $c_2^* \le \overline{c}_2$, concluding that $c_2^* = \overline{c}_2$ and $S$ is free. Therefore, any numerical semigroup with [embedding dimension](../Basic-concepts/Embedding-dimension.qmd) two is free. In fact, they are [telescopic](NS-telescopic.qmd) numerical semigroups.

$\circ$ Let $S = \langle 4, 9, 11 \rangle$. Since $d_3 = gcd(4, 9) = 1$, we have that $\overline{c}_3 = 1$. On the other hand, $c_3^* \ne 1$ because of the definition of minimal system of generators. If we check the other arrangements, it is concluded that $S$ is not a free numerical semigroup.

## Examples with GAP

The following examples are made with the package NumericalSgps in GAP.

$\diamond$ Let $S = \langle 10, 15, 18 \rangle$, in GAP:

``` gap
gap> S := NumericalSemigroup(10, 15, 18);
<Numerical semigroup with 3 generators>
```

In order to know if $S$ is free, we can use the function `IsFree`.

``` gap
gap> IsFree(S);
true
```

The condition of free depends on the arrangement, the function `IsUniversallyFree` checks if the numerical semigroup is free for all arrangements of its minimal generators.

``` gap
gap> IsUniversallyFree(S);
true
```

$\diamond$ If we are interested in know how many free numerical semigroups have a fixed Frobenius number $f \in \mathbb{N}$, the function `FreeNumericalSemigroupsWithFrobeniusNumber` returns these numerical semigroups.

``` gap
gap> Length(FreeNumericalSemigroupsWithFrobeniusNumber(57));
33
```

$\diamond$ Nowadays, there are no functions in NumericalSgps such that for a given numerical semigroup $S$ and an arrangement $(r_0, r_1, \ldots, r_h)$ return true or false depending on whether $S$ is free for the given arrangement. However, the following function computes it.

``` gap
gap> IsFreeForArrangement := function(S, I)
>       local p, Min_gen, list_c;
>       if not IsNumericalSemigroup(S) then
>           Error("First argument must be a Numerical Semigroup");
>       fi;
>       if not IsList(I) then
>           Error("Second argument must be a list of minimal generators of the first argument");
>       fi;
>       p := Length(I);
>       if p = 1 then return false; fi;
>       Min_gen := MinimalGenerators(S);
>       if not Min_gen = I then
>           Error("Second argument is not a minimal system of generators of the first argument");
>       fi;
>       list_c := ConstantsFreeAsterisk(S);
>       return Min_gen[1] = Product(list_c);
> end;
```

The function `ConstantsFreeAsterisk` is not implemented in GAP, it computes the constants $c_i^*$ defined as above.

``` gap
gap> ConstantsFreeAsterisk := function(S)
>       local list_c, p, i, Min_gen, Sub_min_gen, d_i, S_i, k, n_i, q;
>       if not IsNumericalSemigroup(S) then
>           Error("The argument must be a Numerical Semigroup");
>       fi;
>       if 1 in S then return false; fi;
>       Min_gen := MinimalGenerators(S);
>       p := Length(Min_gen);
>       list_c := [];
>       for i in [2..p] do
>           Sub_min_gen := Min_gen{[1..i-1]};
>           d_i := Gcd(Sub_min_gen);
>           S_i := NumericalSemigroup(Sub_min_gen/d_i);
>           n_i := Min_gen[i];
>           k := 2;
>           while not RemInt(k*n_i, d_i) = 0 do
>               k := k + 1;
>           od;
>           q := QuoInt(k*n_i, d_i);
>           while not q in S_i do
>               k := k + 1;
>               while not RemInt(k*n_i, d_i) = 0 do
>                   k := k + 1;
>               od;
>               q := QuoInt(k*n_i, d_i);
>           od;
>           Add(list_c, k);
>       od;
>       return list_c;
> end;
```

## References
